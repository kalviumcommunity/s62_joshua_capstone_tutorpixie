// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userStatus {
  Active
  Discontinued
  Paused
}

enum userRole {
  User
  Tutor
  Student
  Admin
}

model user {
  id                   Int         @id @default(autoincrement())
  email                String?     @unique
  password             String? // Optional if using OAuth
  name                 String?
  image                String? // Required for OAuth
  emailVerified        DateTime? // Used for email verification
  userStatus           userStatus? @default(Active)
  role                 userRole?   @default(User)
  address              String?
  country              String?
  city                 String?
  phone                String?
  subjects             String[]
  createdAt            DateTime    @default(now())
  //tutor specific fields
  grades               String?
  highestQualification String?
  //student specific fields
  parentName           String?
  parentPhone          String?
  parentEmail          String?
  grade                String?
  perHr                Int?
  billingCurrency      currency?

  // NextAuth Relations
  tutorToStudents TutorStudent[] @relation("TutorToStudents")
  studentToTutors TutorStudent[] @relation("StudentToTutors")
  tutorSessions   ClassSession[] @relation("TutorSessions")
  studentSessions ClassSession[] @relation("StudentSessions")
  accounts        Account[]
  sessions        Session[]
  TutorInvoices   Invoices[]     @relation("TutorInvoices")
  StudentInvoices Invoices[]     @relation("StudentInvoices")
}

//Account and Session are required for 
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TutorStudent {
  id        Int      @id @default(autoincrement())
  tutorId   Int
  studentId Int
  subject   String
  createdAt DateTime @default(now())

  tutor   user @relation("TutorToStudents", fields: [tutorId], references: [id])
  student user @relation("StudentToTutors", fields: [studentId], references: [id])

  @@unique([tutorId, studentId, subject])
}

enum status {
  Pending
  Confirmed
  Reviewing
  Cancelled
  Ongoing
  Completed
}

model ClassSession {
  id            Int      @id @default(autoincrement())
  subject       String
  tutorId       Int
  studentId     Int
  startTime     DateTime
  endTime       DateTime
  duration      Float
  meetlink      String?
  topic         String?
  tutorApprov   Boolean  @default(false)
  studentApprov Boolean  @default(false)
  repeating     Boolean  @default(false)
  repeatingDay  Int?
  status        status   @default(Pending)

  tutor   user @relation("TutorSessions", fields: [tutorId], references: [id])
  student user @relation("StudentSessions", fields: [studentId], references: [id])
}

enum invoiceStatus {
  paid
  active
}

enum currency {
  USD
  AUD
  INR
}

model Invoices {
  id        String        @id @default(uuid())
  tutorId   Int?
  studentId Int?
  status    invoiceStatus @default(active)
  amt       Int
  currency  currency      @default(INR)

  tutor   user? @relation("TutorInvoices", fields: [tutorId], references: [id])
  student user? @relation("StudentInvoices", fields: [studentId], references: [id])
}
